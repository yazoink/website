[
  {
    "title": "Idiot installs Etterna on NixOS",
    "entry": 3,
    "subheading": "If it works, it works",
    "date": "25 September 2024",
    "categories": ["Technology", "NixOS", "Etterna", "Games", "Rhythm Games", "Linux"],
    "content": [
      "<p>I&#39;m going to preface this by saying that I&#39;ve only been using NixOS for about a month so I don&#39;t know what I&#39;m doing and there&#39;s probably a much better way to do this.</p>",
      "<br />",
      "<p>I was really surprised to find that Etterna isn&#39;t in nixpkgs, despite it being the largest linux software repository. Before switching to nix I was using Arch and Etterna is in the AUR so it was as easy as one command to install it.</p>",
      "<br />",
      "<p>It seems that not many people have attempted to install Etterna on NixOS, probably for a good reason. This process was very long and annoying and I&#39;m mainly writing this to save anyone else who might try this a few hours and a headache.</p>",
      "<br />",
      "<p>This is the module I&#39;m using to compile and install Etterna to the nix store (<code>etterna.nix</code>):</p>",
      "<br />",
      "<div class='code-block'>",
      "<code><p>{ stdenv, lib, fetchFromGitHub, cmake, nasm</p>",
      "<p>, gtk2, glib, ffmpeg_4, alsa-lib, libmad, libogg, libvorbis</p>",
      "<p>, glew, libpulseaudio, udev, openssl, doxygen, pkg-config</p>",
      "<p>, libX11, libGLU, libGL, libXpm, libXext, libXxf86vm</p>",
      "<p>}:</p>",
      "<br />",
      "<p>stdenv.mkDerivation {</p>",
      "<p>&emsp;pname = &quot;etterna&quot;;</p>",
      "<p>&emsp;version = &quot;0.73-dev&quot;;</p>",
      "<br />",
      "<p>&emsp;src = fetchFromGitHub {</p>",
      "<p>&emsp;&emsp;owner = &quot;etternagame&quot;;</p>",
      "<p>&emsp;&emsp;repo  = &quot;etterna&quot;;</p>",
      "<p>&emsp;&emsp;rev   = &quot;develop&quot;;</p>",
      "<p>&emsp;&emsp;sha256 = &quot;sha256-pAWC3z2aW2GKPzJ8fzLlv0fNWM7FeNSa8UVI933G2UY=&quot;;</p>",
      "<p>&emsp;};</p>",
      "<br />",
      "<p>&emsp;nativeBuildInputs = [ cmake nasm pkg-config ];</p>",
      "<br />",
      "<p>&emsp;buildInputs = [</p>",
      "<p>&emsp;&emsp;gtk2 glib ffmpeg_4 alsa-lib libmad libogg libvorbis</p>",
      "<p>&emsp;&emsp;glew libpulseaudio udev openssl doxygen</p>",
      "<p>&emsp;&emsp;libX11 libGLU libGL libXpm libXext libXxf86vm</p>",
      "<p>&emsp;];</p>",
      "<br />",
      "<p>&emsp;cmakeFlags = [</p>",
      "<p>&emsp;&emsp;&quot;-DCMAKE_BUILD_TYPE=Release&quot;</p>",
      "<p>&emsp;&emsp;&quot;-DWITH_SYSTEM_FFMPEG=1&quot;</p>",
      "<p>&emsp;&emsp;&quot;-DGTK2_GDKCONFIG_INCLUDE_DIR=${gtk2.out}/lib/gtk-2.0/include&quot;</p>",
      "<p>&emsp;&emsp;&quot;-DGTK2_GLIBCONFIG_INCLUDE_DIR=${glib.out}/lib/glib-2.0/include&quot;</p>",
      "<p>&emsp;&emsp;&quot;-DWITH_CRASHPAD=OFF&quot;</p>",
      "<p>&emsp;];</p>",
      "<br />",
      "<p>&emsp;postInstall = &#39;&#39;&#39;&#39;;</p>",
      "<br /></p>",
      "<p>&emsp;meta = with lib; {</p>",
      "<p>&emsp;&emsp;homepage = &quot;https://www.etterna.com/&quot;;</p>",
      "<p>&emsp;&emsp;description = &quot;Free dance and rhythm game for Windows, Mac, and Linux&quot;;</p>",
      "<p>&emsp;&emsp;platforms = platforms.linux;</p>",
      "<p>&emsp;&emsp;license = licenses.mit;</p>",
      "<p>&emsp;&emsp;maintainers = [ ];</p>",
      "<p>&emsp;&emsp;broken = stdenv.isLinux &amp;&amp; stdenv.isAarch64;</p>",
      "<p>&emsp;};</p>",
      "<p>}</p>",
      "</code>",
      "</div>",
      "<br />",
      "<p>Most of this was copied from <a href=\"https://github.com/not-leader/etterna-flake\" target='_blank'>here</a> because everything I tried would fail to compile for one reason or another. I had to make a few modifications because after installing it as-is, I ran into an issue.</p>",
      "<br />",
      "<p>To my knowledge, all of Etterna&#39;s data directories are hard-coded to be in the same directory as the executable binary. On other distros this wouldn&#39;t be as much of a problem, put it wherever you want and symlink the executable to <code>/usr/bin</code>.</p>",
      "<br />",
      "<p>On NixOS, since directories in <code>/nix/store</code> are immutable and read-only, you can&#39;t have the data directories in there because they need to be written to, post-installation. This is a problem because if the Etterna binary isn&#39;t in the same directory as the data directories, it doesn&#39;t work.</p>",
      "<br />",
      "<p>My solution to this was to create a systemd service that will run a script every rebuild. This script will copy all of Etterna&#39;s files in the nix store to <code>~/.local/share</code>, symlink all of the directories that need to be persistent to <code>~/.etterna</code> and create a <code>.desktop</code> file in <code>~/.local/share/applications</code>.</p>",
      "<br />",
      "<p>I have all of these files in an <code>etterna</code> directory in my modules. This is what the <code>default.nix</code> file looks like:</p>",
      "<br />",
      "<div class='code-block'>",
      "<code><p>{pkgs, userConfigs, ...}:</p>",
      "<p>let</p>",
      "<p>&emsp;etterna = pkgs.callPackage ./etterna.nix {};</p>",
      "<p>&emsp;script = ./local-install.sh;</p>",
      "<p>&emsp;desktopFile = ./etterna.desktop;</p>",
      "<p>in</p>",
      "<p>{</p>",
      "<p>&emsp;environment.systemPackages = [</p>",
      "<p>&emsp;&emsp;etterna</p>",
      "<p>&emsp;];</p>",
      "<br />",
      "<p>&emsp;systemd.services.etterna-local-install = {</p>",
      "<p>&emsp;&emsp;description = &quot;Install Etterna locally&quot;;</p>",
      "<p>&emsp;&emsp;wantedBy = [&quot;multi-user.target&quot;];</p>",
      "<p>&emsp;&emsp;serviceConfig = {</p>",
      "<p>&emsp;&emsp;&emsp;Type = &quot;oneshot&quot;;</p>",
      "<p>&emsp;&emsp;&emsp;ExecStart = &quot;${pkgs.bash}/bin/bash ${script} ${etterna} ${desktopFile} ${userConfigs.username}&quot;;</p>",
      "<p>&emsp;&emsp;};</p>",
      "<p>&emsp;};</p>",
      "<p>}</p>",
      "</code>",
      "</div>",
      "<br />",
      "<p>this is <code>local-install.sh</code>:</p>",
      "<br />",
      "<div class='code-block'>",
      "<code><p>homeDir=&quot;/home/$3&quot;</p>",
      "<p>installDir=&quot;$homeDir/.local/share/Etterna&quot;</p>",
      "<p>applicationsDir=&quot;$homeDir/.local/share/applications&quot</p>;",
      "<br />",
      "<p>if [[ -d &quot;$installDir&quot; ]]; then</p>",
      "<p>&emsp;rm -rf &quot;$installDir&quot;</p>",
      "<p>&emsp;cp -r &quot;$1/Etterna&quot; &quot;$installDir&quot;</p>",
      "<p>&emsp;rm -rf \"$installDir/Announcers\"</p>",
      "<p>&emsp;rm -rf \"$installDir/Assets\"</p>",
      "<p>&emsp;rm -rf \"$installDir/NoteSkins\"</p>",
      "<p>&emsp;rm -rf \"$installDir/Songs\"</p>",
      "<p>&emsp;rm -rf \"$installDir/Themes\"</p>",
      "<p>else</p>",
      "<p>&emsp;cp -r &quot;$1/Etterna&quot; &quot;$installDir&quot;</p>",
      "<p>&emsp;mkdir -p &quot;$homeDir/.etterna/Save&quot;</p>",
      "<p>&emsp;mv &quot;$installDir/Announcers&quot; &quot;$homeDir/.etterna&quot;</p>",
      "<p>&emsp;mv &quot;$installDir/Assets&quot; &quot;$homeDir/.etterna&quot;</p>",
      "<p>&emsp;mv &quot;$installDir/NoteSkins&quot; &quot;$homeDir/.etterna&quot;</p>",
      "<p>&emsp;mv &quot;$installDir/Songs&quot; &quot;$homeDir/.etterna&quot;</p>",
      "<p>&emsp;mv &quot;$installDir/Themes&quot; &quot;$homeDir/.etterna&quot;</p>",      
      "<p>fi</p>",
      "<br />",
      "<p>ln -s &quot;$homeDir/.etterna/Announcers&quot; &quot;$installDir&quot;</p>",
      "<p>ln -s &quot;$homeDir/.etterna/Assets&quot; &quot;$installDir&quot;</p>",
      "<p>ln -s &quot;$homeDir/.etterna/NoteSkins&quot; &quot;$installDir&quot;</p>",
      "<p>ln -s &quot;$homeDir/.etterna/Save&quot; &quot;$installDir&quot;</p>",
      "<p>ln -s &quot;$homeDir/.etterna/Songs&quot; &quot;$installDir&quot;</p>",
      "<p>ln -s &quot;$homeDir/.etterna/Themes&quot; &quot;$installDir&quot;</p>",
      "<br />",
      "<p>if [[ -f &quot;$applicationsDir/etterna.desktop&quot; ]]; then</p>",
      "<p>&emsp;rm &quot;$applicationsDir/etterna.desktop&quot;</p>",
      "<p>fi</p>",
      "<br />",
      "<p>cp &quot;$2&quot; &quot;$applicationsDir/etterna.desktop&quot;</p>",
      "<p>echo &quot;Exec=$installDir/Etterna&quot; | tee -a &quot;$applicationsDir/etterna.desktop&quot;</p>",
      "<br />",
      "<p>chown -R &quot;$3&quot;:users &quot;$homeDir/.etterna&quot;</p>",
      "<p>chmod -R 755 &quot;$homeDir/.etterna&quot;</p>",
      "<br />",
      "<p>mkdir &quot;$installDir/Cache&quot;</p>",
      "<p>chown -R &quot;$3&quot;:users &quot;$installDir/Cache&quot;</p>",
      "<p>chmod -R 755 &quot;$installDir/Cache&quot;</p>",
      "</code>",
      "</div>",
      "<br />",
      "<p>and this is <code>etterna.desktop</code>:</p>",
      "<br />",
      "<div class='code-block'>",
      "<code><p>[Desktop Entry]</p>",
      "<p>Name=Etterna</p>",
      "<p>Comment=The Next Step in Dance Simulation</p>",
      "<p>Type=Application</p>",
      "<p>Categories=Game</p>",
      "</code>",
      "</div>",
      "<br />",
      "</code><p>This configuration is working as of when I&#39;m writing this. If anyone has a better solution to this, feel free to <a href=\"mailto:yoinky@cock.li\">email</a> me about it.</p>"
    ]
  },
  {
    "title": "Tunneling My Homelab",
    "entry": 2,
    "subheading": "Hosting public services without port forwarding",
    "date": "23 September 2024",
    "categories": ["Technology", "Self-hosting", "Networking", "NixOS", "Linux"],
    "content": [
      "<p>Tunneling my homelab to a VPS was really a lot easier than I expected. For a good while I was reluctant to buy a VPS since I didn't know if I was actually going to get it to work, but after seeing <a href='https://blog.ahwx.org/frp' target='_blank'>this article about frp</a> I decided to give it a go.</p>",
      "<br />",
      "<p>The VPS I've gone with is a 2 GB Linode running Alpine Linux and my home servers are running NixOS.</p>",
      "<p>To enable frp on my home server, I've added a module like this:</p>",
      "<br />",
      "<div class='code-block'>",
      "<code>",
      "<p>{</p>",
      "<p>&emsp;services.frp = {</p>",
      "<p>&emsp;&emsp;enable = true;</p>",
      "<p>&emsp;&emsp;role = \"client\";</p>",
      "<p>&emsp;&emsp;settings = {</p>",
      "<p>&emsp;&emsp;&emsp;serverAddr = \"vps.public.ip.address\";</p>",
      "<p>&emsp;&emsp;&emsp;serverPort = 7000;</p>",
      "<p>&emsp;&emsp;&emsp;auth.method = \"token\";</p>",
      "<p>&emsp;&emsp;&emsp;auth.token = \"my token\";</p>",
      "<p>&emsp;&emsp;&emsp;transport.protocol = \"tcp\";</p>",
      "<p>&emsp;&emsp;&emsp;proxies = [</p>",
      "<p>&emsp;&emsp;&emsp;&emsp;{</p>",
      "<p>&emsp;&emsp;&emsp;&emsp;&emsp;name = \"my service\";</p>",
      "<p>&emsp;&emsp;&emsp;&emsp;&emsp;type = \"tcp\";</p>",
      "<p>&emsp;&emsp;&emsp;&emsp;&emsp;localIP = \"service.local.ip\";</p>",
      "<p>&emsp;&emsp;&emsp;&emsp;&emsp;localPort = service port number;</p>",
      "<p>&emsp;&emsp;&emsp;&emsp;&emsp;remotePort = service port number;</p>",
      "<p>&emsp;&emsp;&emsp;&emsp;}</p>",
      "<p>&emsp;&emsp;&emsp;];</p>",
      "<p>&emsp;&emsp;};</p>",
      "<p>&emsp;};</p>",
      "<p>}</p>",
      "</code>",
      "</div>",
      "<br />",
      "<p>To enable it on the VPS I installed frp with <code>doas apk add frp</code> and wrote the following to <code>/etc/frp/frps.toml:</code></p>",
      "<br />",
      "<div class='code-block'>",
      "<code>",
      "<p>bindPort = 7000</p>",
      "<p>auth.method = \"token\"</p>",
      "<p>auth.token = \"my token\"</p>",
      "</code>",
      "</div>",
      "<br />",
      "<p>And that's all there is to it! You can now access all the forwarded services from the address of your VPS.</p>",
      "<br />",
      "<p>I also use Caddy as a reverse proxy to enable HTTPS and map the all of the services to subdomains. To do this all you need is to install Caddy and create a file under <code>/etc/caddy/Caddyfile</code> that looks something like this:</p>",
      "<br />",
      "<div class='code-block'>",
      "<code>",
      "<p>\"myservice.domain.tld\" {</p>",
      "<p>&emsp;reverse_proxy vps.public.ip:port</p>",
      "<p>}</p>",
      "</code>",
      "</div>",
      "<br />",
      "<p>So far it's been very fast and stable, I definitely reccommend trying this if you're looking for a way to host your homelab publically without port forwarding or revealing your IP.</p>"
    ]
  },
  {
    "title": "A Simple Blog",
    "entry": 1,
    "subheading": "An uninteresting post about how this thing works",
    "date": "22 September 2024",
    "categories": ["Technology", "PHP", "Self-hosting", "JSON", "Programming"],
    "content": [
      "<p>I gave up on trying to maintain a blog while still hosting this site on Neocities, since maintaining a blog in pure HTML/CSS is a massive pain in the ass. Now, since I'm hosting this on my personal server there are pretty much no limitations, so I've rewritten this site in PHP. My \"blogging engine\" solution is very rudimentary but it definitely gets the job done miles better than the old way.</p>",
      "<br />",
      "<p>I can't be fucked to set up a full content management system or a SQL database for this so I'm just putting all of my posts in a JSON file structured like this:</p>",
      "<br />",
      "<div class='code-block'>",
      "<code>",
      "<p>[</p>",
      "<p>&emsp;{</p>",
      "<p>&emsp;&emsp;\"title\": \"Example Blog Entry\",</p>",
      "<p>&emsp;&emsp;\"entry\": 1,</p>",
      "<p>&emsp;&emsp;\"subheading\": \"This is a blog post\",</p>",
      "<p>&emsp;&emsp;\"date\": \"22 September 2024\",</p>",
      "<p>&emsp;&emsp;\"categories\": [\"Personal\" \"Technology\"],</p>",
      "<p>&emsp;&emsp;\"content\": [</p>",
      "<p>&emsp;&emsp;&emsp;\"&lt;p&gt;This is a paragraph.&lt;/p&gt;\",</p>",
      "<p>&emsp;&emsp;&emsp;\"&lt;p&gt;This is another paragraph.&lt;/p&gt;\"</p>",
      "<p>&emsp;&emsp;]</p>",
      "<p>&emsp;}</p>",
      "<p>]</p>",
      "</code>",
      "</div>",
      "<br />",
      "<p>It's obviously not an optimal solution since I have to SSH into my server and edit a JSON file to make a blog post but it's more than doable. Maybe in the future I'll consider making some kind of UI for it but I'm fairly content with it as-is.</p>",
      "<br />",
      "<p>I've also written an RSS feed generator that looks like this:</p>",
      "<br />",
      "<div class='code-block'>",
      "<code>",
      "<p>&lt;?php</p>",
      "<p>require 'dynamic/variables.php';</p>",
      "<br />",
      "<p>\\$jsonStr = file_get_contents('json/blog.json');</p>",
      "<p>\\$json = json_decode(\\$jsonStr, true);</p>",
      "<br />",
      "<p>header(\"Content-Type: application/rss+xml; charset=UTF-8\");</p>",
      "<p>echo \"&lt;?xml version='1.0' encoding='UTF-8'?&gt;\";</p>",
      "<p>echo \"&lt;rss version='2.0'&gt;\";</p>",
      "<p>echo \"&lt;channel&gt;\";</p>",
      "<p>echo \"&lt;title>yazoink&lt;/title&gt;\";</p>",
      "<p>echo \"&lt;link&gt;https://\\$domain&lt;/link&gt;\";</p>",
      "<p>echo \"&lt;description>yazoink's blog&lt;/description&gt;\";</p>",
      "<p>foreach (\\$json as \\$blogEntry) {</p>",
      "<p>&emsp;echo \"&lt;item&gt;\";</p>",
      "<p>&emsp;echo \"&lt;title&gt;\" . \\$blogEntry['title'] . \"&lt;/title&gt;\";</p>",
      "<p>&emsp;echo \"&lt;link&gt;https://\\$domain/index.php?nav=Blog&amp;entry=\" . \\$blogEntry['entry'] . \"&lt;/link&gt;\";</p>",
      "<p>&emsp;echo \"&lt;description&gt;\" . \\$blogEntry['subheading'] . \"&lt;/description&gt;\";</p>",
      "<p>&emsp;echo \"&lt;pubDate&gt;\" . date(DATE_RSS, strtotime(\\$blogEntry['date'])) . \"&lt;/pubDate&gt;\";</p>",
      "<p>&emsp;echo \"&lt;/item&gt;\";</p>",
      "<p>}</p>",
      "<p>echo \"&lt;/channel&gt;\";</p>",
      "<p>echo \"&lt;/rss&gt;\";</p>",
      "<p>?&gt;</p>",
      "</code>",
      "</div>"
    ]
  }
]
